<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- <context:component-scan base-package="kr.co.shoestore.mapper"/>
 	 -->
  	<beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />    

 	

	<!-- 해당 URL에 접근하기 위한 권한 설정  use-expressions="true"-->
	<http auto-config="true" use-expressions="true">      

	<intercept-url pattern="/**" access="permitAll" />   
			<!-- <intercept-url pattern="/**" access="ROLE_USER" />    -->
		<intercept-url pattern="/resources/**" access="permitAll" /> 
		<!-- <intercept-url pattern="/**" access="hasRole('ROLE_USER')" />   -->
		
		<!-- 순서대로
			1. 로그인 페이지 / 2. 로그인 성공 시 이동할 페이지 / 3.4. 로그인 페이지 id,pw 담을 변수 이름 / 5. 로그인 form action 주소/6.로그인 실패 시 호출할 URL
			7. 						  -->
			<form-login login-page="/user/login"
				default-target-url="/"     
				username-parameter="id"         
				password-parameter="pw"  /> 
		 				
				
		<!-- max-sessions : 중복 로그인 가능한 세션 수 / expired-url="/login_duplicate -->
		<session-management>
			<concurrency-control max-sessions="1" />
		</session-management>
		<!-- 로그아웃 되면 세션 초기화 -->
	 <logout invalidate-session="true" logout-url="/logout"   logout-success-url="/login?logout" /> 
		<!-- enable csrf protection -->

		<!-- csrf를 통한 해킹을 막음??? -->
	<!-- 	<csrf/>  -->
	</http> 
	
	<!-- 	<authentication-provider>
				<user-service>
					<user name="admin" password="adminpw" authorities="ROLE_ADMIN"/>
				</user-service>
			</authentication-provider> -->
			
<!-- 	    <beans:bean id="userDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
        <beans:property name="dataSource" ref="dataSource"/>
    </beans:bean> -->
 		<context:component-scan base-package="kr.co.shoestore.mapper"/>

					<authentication-manager>
					<authentication-provider ref="userAuthProvider"/>
					<authentication-provider user-service-ref="userServiceImpl">
		<!-- <authentication-provider user-service-ref="userService"> -->
		<!-- <user-service>

                <user name="z" password="a123123" authorities="ROLE_USER" />

            </user-service> -->
<!-- 			 <jdbc-user-service data-source-ref="dataSource" id="userService"
				users-by-username-query="select id as username, pw as password, 1 as enabled from user where id=?"
				authorities-by-username-query="select id, authority_name as authority from authority where id=?"/> -->
				</authentication-provider>
</authentication-manager>
<beans:bean id="userServiceImpl" class="kr.co.shoestore.service.impl.UserServiceImpl"/>
<beans:bean id="userAuthProvider" class="kr.co.shoestore.security.AuthenticationProvider"/>

		<!-- 인증처리를 위한 최상위 태그 -->
<!--         <authentication-manager>   -->
        <!-- 사용자이름 / 비밀번호를 제공해줄 서비스 등록 (아마 userService??) --> 
<!-- 	 		 <authentication-provider user-service-ref="userService"/>   
	</authentication-manager> -->
	<!-- 위에 등록한 서비스 빈 등록 -->
<!--  	<beans:bean id="userService" class="kr.co.shoestore.service.impl.UserServiceImpl">
   	</beans:bean>    -->
   	 
</beans:beans>

